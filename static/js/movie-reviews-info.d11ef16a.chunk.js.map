{"version":3,"file":"static/js/movie-reviews-info.d11ef16a.chunk.js","mappings":"+NA6BA,EAzBgB,WACd,IAAMA,GAAOC,EAAAA,EAAAA,MAAPD,GAEN,GAAmCE,EAAAA,EAAAA,UAAS,mBAAmB,kBAC7DC,EAAAA,EAAAA,IAAgBH,MADVI,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,KAG1B,OAAID,GAAc,mDAA2BA,EAAME,QAAjC,OACbH,OAAL,EACME,EAAKE,OAAS,GAEd,wBACGF,EAAKG,KAAI,SAAAC,GAAI,OACZ,2BACE,qCAAaA,EAAKC,OAAlB,QACA,yBAAID,EAAKE,QAAT,SAFOF,EAAKV,UAQb,8C,0MCtBPa,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,sGAGRD,IAAAA,IAAU,oBAAqB,CACvCE,OAAQ,CACNC,QAASJ,KALK,uBAECP,EAFD,EAEhBA,KAAQY,QAFQ,kBAQXZ,GARW,2CAAH,qDAWXa,EAAe,mCAAG,WAAMnB,GAAN,yFACCc,IAAAA,IAAA,iBAAoBd,GAAM,CAC/CgB,OAAQ,CACNC,QAASJ,EACTO,SAAU,WAJQ,uBACdd,EADc,EACdA,KADc,kBAOfA,GAPe,2CAAH,sDAUfe,EAAe,mCAAG,WAAMrB,GAAN,yFACCc,IAAAA,IAAA,iBAAoBd,EAApB,YAAkC,CACvDgB,OAAQ,CACNC,QAASJ,EACTO,SAAU,WAJQ,uBACdd,EADc,EACdA,KADc,kBAOfA,EAAKgB,MAPU,2CAAH,sDAUfnB,EAAe,mCAAG,WAAMH,GAAN,yFACCc,IAAAA,IAAA,iBAAoBd,EAApB,YAAkC,CACvDgB,OAAQ,CACNC,QAASJ,EACTO,SAAU,QACVG,KAAM,KALY,uBACdjB,EADc,EACdA,KADc,kBAQfA,EAAKY,SARU,2CAAH,sDAUfM,EAAQ,mCAAG,WAAMC,GAAN,yFACQX,IAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CACNC,QAASJ,EACTO,SAAU,QACVG,KAAM,EACNG,eAAe,EACfD,MAAAA,KAPW,uBACPnB,EADO,EACPA,KADO,kBAURA,EAAKY,SAVG,2CAAH","sources":["components/Reviews/Reviews.jsx","services/movie-api.js"],"sourcesContent":["import { useQuery } from 'react-query';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../services/movie-api';\n\nconst Reviews = () => {\n  let { id } = useParams();\n\n  const { isLoading, error, data } = useQuery('getMovieReviews', () =>\n    getMovieReviews(id)\n  );\n  if (error) return <h2>An error has occurred {error.message} </h2>;\n  if (!isLoading) {\n    if (data.length > 0) {\n      return (\n        <ul>\n          {data.map(item => (\n            <li key={item.id}>\n              <h4>Author: {item.author} </h4>\n              <p>{item.content} </p>\n            </li>\n          ))}\n        </ul>\n      );\n    } else {\n      return <h2>No reviews yet.</h2>;\n    }\n  }\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'c2ea3dda8b7f673838b93491bd4cf505';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst getTrending = async () => {\n  const {\n    data: { results: data },\n  } = await axios.get('/trending/all/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nconst getMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data;\n};\n\nconst getMovieCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: 1,\n    },\n  });\n  return data.results;\n};\nconst getMovie = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: 1,\n      include_adult: false,\n      query,\n    },\n  });\n  return data.results;\n};\n\nexport {\n  getTrending,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n  getMovie,\n};\n"],"names":["id","useParams","useQuery","getMovieReviews","isLoading","error","data","message","length","map","item","author","content","API_KEY","axios","getTrending","params","api_key","results","getMovieDetails","language","getMovieCredits","cast","page","getMovie","query","include_adult"],"sourceRoot":""}